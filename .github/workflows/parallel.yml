name: Parallel

on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_DEMO_PROJECT_PATH: "projects/python-demo"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd $PYTHON_DEMO_PROJECT_PATH && pip install -r requirements.txt
      - name: Lint with Ruff
        run: |
          cd $PYTHON_DEMO_PROJECT_PATH/src && ruff check --output-format=github .
        continue-on-error: false
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd $PYTHON_DEMO_PROJECT_PATH && pip install -r requirements.txt
      - name: Format with Ruff
        run: |
          cd $PYTHON_DEMO_PROJECT_PATH/src && ruff format --check --diff
        continue-on-error: true

  test:
    runs-on: ubuntu-latest
    needs: ['lint', 'format']
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # Install pip and pytest
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd $PYTHON_DEMO_PROJECT_PATH && pip install -r requirements.txt
      - name: Test with pytest
        run: |
          cd $PYTHON_DEMO_PROJECT_PATH && pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }} # https://docs.github.com/en/actions/learn-github-actions/expressions#always

  
  # publish:
  #   runs-on: ubuntu-latest
  #   needs: ['test']
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #     - name: Publish Build
  #       run: echo "Python App Published"
